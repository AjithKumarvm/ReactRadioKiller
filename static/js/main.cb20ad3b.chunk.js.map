{"version":3,"sources":["actions.js","PlayList/PlayListControls/index.js","PlayList/index.js","Player/index.js","Controls/PlayerMeta/index.js","Controls/PlayerTimer/index.js","Controls/index.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["updatePlaylist","type","list","map","index","updateUserIntent","intent","PlayListControls","state","show","prevProps","this","props","playerStatus","setState","push","CSSTransition","in","current","timeout","className","React","Component","PlayList","checkIfPlaying","id","currentStation","checkIfSelected","playListClick","station","player","play","getPlayList","getPlayer","playList","length","autoPlay","playListLoader","classNames","join","key","onClick","selected","title","genre","slice","PureComponent","connect","dispatch","fetch","then","resp","json","music","catch","e","console","error","playerTimeStamp","Player","updateIndicator","userIntent","window","navigator","onLine","setTimeout","retry","onStatus","status","timeStamp","localStorage","setItem","params","refs","getItem","currentStationId","filtered","filter","src","source","onloadedmetadata","onMeta","onaudioprocess","audioProcess","onplay","onplaying","onpause","onwaiting","onstalled","onerror","ontimeupdate","onTimeUpdate","onError","setStation","pause","addEventListener","removeEventListener","ref","playerTime","updatePlayerTime","forwardRef","PlayerMeta","image","style","backgroundImage","PlayerTimer","now","Date","time","parseInt","seconds","minutes","text","Controls","action","playerIcon","changeTrack","currentStationIndex","prevNextIcon","Fragment","prev","next","inner","outer","onlineStatus","App","createRef","offlineMessage","target","href","alt","height","Boolean","location","hostname","match","defaultState","store","createStore","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cb20ad3b.chunk.js","sourcesContent":["export const updatePlaylist = ({ list }) => ({\n  type: 'UPDATE_PLAYLIST',\n  list: list.map((list, index) => ({...list, index}))\n})\n\nexport const updatePlayerStatus = ({status}) => ({\n    type: 'UPDATE_PLAYER_STATUS',\n    status\n})\n\nexport const updatePlayerTime = ({timeStamp}) => ({\n    type: 'UPDATE_PLAYER_TIME',\n    timeStamp\n})\n\nexport const setStation = ({station}) => ({\n    type: 'SET_STATION',\n    station\n})\n\nexport const updateOnlineStatus = ({status}) => ({\n    type: 'UPDATE_ONLINE_STATUS',\n    status\n})\n\nexport const updateUserIntent = ({intent}) => ({\n    type: 'UPDATE_USER_INTENT',\n    intent\n})\n","import React from 'react'\nimport './styles.scss'\nimport {CSSTransition} from 'react-transition-group'\n\nexport default class PlayListControls extends React.Component{\n    state = {show: false}\n    componentDidUpdate (prevProps) {\n        const show = this.props.playerStatus === 'PLAYING'\n        show !== this.state.show && this.setState({\n            show\n        })\n    }\n    render () {\n        const classNames = ['playListTriangle']\n        classNames.push(this.state.show ? 'play':'stop')\n        return <CSSTransition in={this.state.show && this.props.current} timeout={300} className='playListTriangle'>\n            <div />\n        </CSSTransition> \n    }\n}","import React from 'react'\nimport { connect } from 'react-redux'\nimport { updatePlaylist } from '../actions'\nimport './styles.scss'\nimport PlayListControls from './PlayListControls'\nimport {updateUserIntent} from '../actions'\n\nclass PlayList extends React.PureComponent {\n  componentDidMount () {\n    this.props.getPlayList()\n    this.player = this.props.getPlayer()\n  }\n  checkIfPlaying = id => {\n    const { playerStatus } = this.props\n    return (\n      this.props.currentStation.id === id &&\n      (playerStatus === 'PLAYING' || playerStatus === 'BUFFERING')\n    )\n  }\n  checkIfSelected = id => {\n    return this.props.currentStation.id === id\n  }\n  componentDidUpdate (prevProps) {\n    if (!prevProps.currentStation && this.props.playList.length) {\n      this.player.play()({ autoPlay: true })\n    }\n  }\n  playListClick = station => () => {\n    this.player.play(station)()\n    this.props.updateUserIntent('PLAY')\n  }\n  render () {\n    if (this.props.playListLoader) {\n      return (\n        <div className='playList hideScroll'>\n          <div className='list placeholder selected active' />\n          <div className='list placeholder selected' />\n          <div className='list placeholder selected' />\n          <div className='list placeholder selected' />\n          <div className='list placeholder selected' />\n          <div className='list placeholder selected' />\n          <div className='list placeholder selected' />\n        </div>\n      )\n    }\n    return (\n      <div className='playList hideScroll'>\n        {this.props.playList.map(station => {\n          const classNames = ['list']\n          this.checkIfSelected(station.id) && classNames.push('selected')\n          return (\n            <div\n              className={classNames.join(' ')}\n              key={station.id}\n              onClick={this.playListClick(station)}\n            >\n              <PlayListControls\n                playerStatus={this.props.playerStatus}\n                current={this.checkIfSelected(station.id)}\n                selected={this.checkIfSelected(station.id)}\n              />\n              {station.title}{' '}\n              <div className='lang'>{station.genre.slice(0, 3)}</div>\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  ({ playList, playListLoader, currentStation, playerStatus }) => ({\n    playList,\n    playListLoader,\n    currentStation,\n    playerStatus\n  }),\n  dispatch => ({\n    getPlayList: () => {\n      // fetch('https://www.mocky.io/v2/5d8367f13400003322f4a489')\n      fetch(\n        // 'https://firebasestorage.googleapis.com/v0/b/radio-streamer-6111f.appspot.com/o/playlist.json?alt=media'\n        'https://ajithkumarvm.github.io/radiokiller/playlist.json'\n      )\n        .then(resp => resp.json())\n        .then(resp => {\n          dispatch(updatePlaylist({ list: resp.music }))\n        })\n        .catch(e => {\n          // dispatch(updatePlaylist({ list: playList.music }))\n          console.error('api failed', e)\n        })\n    },\n    updateUserIntent: intent => dispatch(updateUserIntent({intent}))\n  })\n)(PlayList)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport {\n  updatePlayerStatus,\n  updatePlayerTime,\n  setStation,\n  updateOnlineStatus\n} from '../actions'\n\nlet playerTimeStamp = 0\nclass Player extends React.PureComponent {\n  componentDidMount () {\n    this.player = this.refs.player\n    window.addEventListener('online', this.updateIndicator)\n    window.addEventListener('offline', this.props.updateIndicator)\n  }\n  componentWillUnmount () {\n    window.removeEventListener('online', this.props.updateIndicator)\n    window.removeEventListener('offline', this.props.updateIndicator)\n  }\n  updateIndicator = () => {\n    if (\n      this.props.playerStatus !== 'PLAYING' &&\n      this.props.userIntent === 'PLAY' &&\n      window.navigator.onLine\n    ) {\n      setTimeout(() => this.play()({ retry: true }), 1000)\n    }\n    this.props.updateIndicator()\n  }\n  onStatus = status => e => {\n    if (status === 'PLAYING' && e && e.timeStamp) {\n      playerTimeStamp = e.timeStamp\n      localStorage.setItem('currentStationId', this.props.currentStation.id)\n    }\n    this.props.onStatus(status)(e)\n  }\n  play = station => (params = { retry: false, autoPlay: false }) => {\n    if (params.retry) {\n      this.onStatus('WAITING')()\n    }\n    this.onStatus('PAUSE')()\n    const { player } = this.refs\n    if (params.autoPlay && localStorage.getItem('currentStationId')) {\n      const currentStationId = localStorage.getItem('currentStationId')\n      const filtered = this.props.playList.filter(\n        ({ id }) => id === currentStationId\n      )\n      if (filtered.length) {\n        station = filtered[0]\n      }\n    }\n    station = station || this.props.currentStation\n    player.src = station.source\n    player.onloadedmetadata = this.onMeta\n    player.onaudioprocess = this.audioProcess\n    player.onplay = this.onStatus('PLAY')\n    player.onplaying = this.onStatus('PLAYING')\n    player.onpause = this.onStatus('PAUSE')\n    player.onwaiting = this.onStatus('WAITING')\n    player.onstalled = this.onStatus('STALLED')\n    player.onerror = this.onStatus('ERROR')\n    player.ontimeupdate = this.props.onTimeUpdate\n    try {\n      player.play().catch(this.onError)\n    } catch (e) {\n      console.error('player', e)\n      this.onError(e)\n    }\n\n    this.props.setStation({ station })\n  }\n  onError = e => {\n    this.onStatus('ERROR')()\n  }\n  pause = () => {\n    const { player } = this.refs\n    player.pause()\n  }\n  render () {\n    return <audio ref='player' />\n  }\n}\n\nexport default connect(\n  ({ playerStatus, playerTime, currentStation, playList, userIntent }) => ({\n    playerStatus,\n    playerTime,\n    currentStation,\n    playList,\n    userIntent\n  }),\n  dispatch => ({\n    setStation: station => {\n      dispatch(setStation(station))\n    },\n    onStatus: status => e => {\n      dispatch(updatePlayerStatus({ status }))\n    },\n    onTimeUpdate: ({ timeStamp }) => {\n      dispatch(updatePlayerTime({ timeStamp: timeStamp - playerTimeStamp }))\n    },\n    updateIndicator: () => {\n      dispatch(updateOnlineStatus({ status: navigator.onLine }))\n    }\n  }),\n  null,\n  { forwardRef: true }\n)(Player)\n","import React from 'react'\nimport './styles.scss'\n\nexport default class PlayerMeta extends React.PureComponent {\n    render () {\n        const {image, title} = this.props.currentStation || {}\n        return <div className='playerMeta'>\n            <div className='icon' style={{backgroundImage: `url(${image})`}} />\n            <div className='stationName'>{title}</div>\n        </div>\n    }\n}","import React from 'react'\nimport './styles.scss'\n\nexport default class PlayerTimer extends React.PureComponent{\n    componentDidMount () {\n        this.now = Date.now()\n    }\n\n    render() {\n        if (this.props.playerStatus !== 'PLAYING') {\n            return null\n        }\n        const time = parseInt(this.props.playerTime / 1000)\n        let seconds = `0${time % 60}`\n        seconds = seconds.slice(-2)\n        let minutes = `0${parseInt(time / 60)}`\n        minutes = minutes.slice(-2)\n        const text = ` ${minutes}:${seconds}`\n        return <div className='PlayerTimer'>\n            {text}\n        </div>\n    }\n}","import React from 'react'\nimport { connect } from 'react-redux'\nimport './styles.scss'\nimport './prev_next.scss'\nimport PlayerMeta from './PlayerMeta'\nimport PlayerTimer from './PlayerTimer'\nimport {updateUserIntent} from './../actions'\n\nclass Controls extends React.PureComponent {\n  componentDidMount () {\n    this.player = this.props.getPlayer()\n  }\n  action = () => {\n    if (this.props.playerStatus === 'PLAYING' || this.props.playerStatus === 'WAITING') {\n      this.player.pause()\n      this.props.updateUserIntent('PAUSE')\n    } else {\n      this.player.play()()\n      this.props.updateUserIntent('PLAY')\n    }\n  }\n  playerIcon = () => {\n    if (this.props.playerStatus === 'PLAYING') {\n      return <div className='playStopControls stop' />\n    } else if (this.props.playerStatus === 'PAUSE') {\n      return <div className='playStopControls play' />\n    } else if (this.props.playerStatus === 'STALLED' || this.props.playerStatus === 'ERROR') {\n      return <div className='playStopControls stalled' />\n    } else {\n      return <div className='playStopControls buffer' />\n    }\n  }\n  changeTrack = action => () => {\n    let station = this.props.playList[0]\n    if (action === 'NEXT') {\n      if (this.props.currentStationIndex === this.props.playList.length - 1) {\n        station = this.props.playList[0]\n      } else {\n        station = this.props.playList[this.props.currentStationIndex + 1]\n      }\n    } else {\n      if (this.props.currentStationIndex === 0) {\n        station = this.props.playList[this.props.playList.length - 1]\n      } else {\n        station = this.props.playList[this.props.currentStationIndex - 1]\n      }\n    }\n    this.props.updateUserIntent('PLAY')\n    this.player.play(station)()\n  }\n\n  prevNextIcon = () => (\n    <React.Fragment>\n      <div className='triangle' />\n      <div className='bar' />\n    </React.Fragment>\n  )\n  prev = () => {\n    if (this.props.playerStatus === 'INITIALISING') {\n      return null\n    }\n    return (\n      <div\n        className='actions prev prevNextControl'\n        onClick={this.changeTrack('PREV')}\n      >\n        <this.prevNextIcon />\n      </div>\n    )\n  }\n  next = () => {\n    if (this.props.playerStatus === 'INITIALISING') {\n      return null\n    }\n    return (\n      <div\n        className='actions next prevNextControl'\n        onClick={this.changeTrack('NEXT')}\n      >\n        <this.prevNextIcon />\n      </div>\n    )\n  }\n  render () {\n    const inner = ['innerWrapper']\n    !this.props.playListLoader && inner.push('anim')\n    const outer = ['playerControls']\n    !this.props.playListLoader && outer.push('controlAnim')\n    return (\n      <div className={outer.join(' ')}>\n        <div className={inner.join(' ')}>\n          {!this.props.playListLoader && (\n            <PlayerMeta currentStation={this.props.currentStation} />\n          )}\n          {!this.props.playListLoader && <this.prev />}\n          <div className='actions' onClick={this.action}>\n            <this.playerIcon />\n          </div>\n          {!this.props.playListLoader && <this.next />}\n          <PlayerTimer playerTime={this.props.playerTime} playerStatus={this.props.playerStatus} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  ({ playerStatus, playList, currentStation, playListLoader, playerTime, onlineStatus, userIntent }) => ({\n    playerStatus,\n    playList,\n    currentStationIndex: currentStation ? currentStation.index : 0,\n    currentStation,\n    playListLoader,\n    playerTime,\n    onlineStatus,\n    userIntent\n  }),\n  dispatch => ({\n    updateUserIntent: intent => dispatch(updateUserIntent({intent}))\n  })\n)(Controls)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { CSSTransition } from 'react-transition-group'\n\nimport './App.scss'\nimport PlayList from './PlayList'\nimport Player from './Player'\nimport Controls from './Controls'\nclass App extends React.PureComponent {\n  state = {\n    show: false\n  }\n  componentDidMount () {\n    this.setState({\n      show: true\n    })\n  }\n  player = React.createRef()\n  play = station => {\n    this.player.current.play(station)()\n  }\n  getPlayer = () => this.player.current\n  offlineMessage = () =>\n    !this.props.onlineStatus ? (\n      <div className='offlineMessage'>\n        YOU ARE OFFLINE, MUSIC WILL RESUME WHEN YOU ARE ONLINE\n      </div>\n    ) : null\n  render () {\n    return (\n      <>\n        <div className={!this.props.onlineStatus ? 'offline' : ''}>\n          <h1 className='colored'>RADIO KILLER</h1>\n          <CSSTransition in={this.state.show} timeout={300} classNames='rkAnim'>\n            <div className='rkContainer'>\n              <Player ref={this.player} />\n              <PlayList play={this.play} getPlayer={this.getPlayer} />\n              <Controls getPlayer={this.getPlayer} />\n            </div>\n          </CSSTransition>\n        </div>\n        <div className='playLink'>\n          <a target='_blank' href='https://play.google.com/store/apps/details?id=com.vilvan.android.radiokiller&utm_source=radiokillerpage&pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'>\n            <img\n              alt='Get it on Google Play'\n              height='60'\n              src='https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png'\n            />\n          </a>\n        </div>\n        <this.offlineMessage />\n      </>\n    )\n  }\n}\n\nexport default connect(({ onlineStatus }) => ({\n  onlineStatus\n}))(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Code Owner: Ajith VM\n\nconst defaultState = {\n  playerStatus: 'INITIALISING',\n  playListLoader: true,\n  playList: [],\n  currentStation: null,\n  onlineStatus: navigator.onLine,\n  userIntent: 'PLAY'\n}\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case 'UPDATE_PLAYER_STATUS': {\n      return {\n        ...state,\n        playerStatus: action.status\n      }\n    }\n\n    case 'UPDATE_PLAYLIST': {\n      return {\n        ...state,\n        playList: action.list,\n        playListLoader: false,\n        currentStation: action.list[0]\n      }\n    }\n\n    case 'UPDATE_PLAYER_TIME': {\n      return {\n        ...state,\n        playerTime: action.timeStamp\n      }\n    }\n\n    case 'SET_STATION': {\n      return {\n        ...state,\n        currentStation: action.station\n      }\n    }\n\n    case 'UPDATE_ONLINE_STATUS': {\n      return {\n        ...state,\n        onlineStatus: action.status\n      }\n    }\n\n    case 'UPDATE_USER_INTENT': {\n      return {\n        ...state,\n        userIntent: action.intent\n      }\n    }\n\n    default:\n      return state\n  }\n}\n\nexport { reducer }\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { reducer } from './reducer'\n\nconst store = createStore(reducer)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}